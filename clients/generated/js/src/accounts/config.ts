/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  getBettingSideDecoder,
  getBettingSideEncoder,
  getCreatorDecoder,
  getCreatorEncoder,
  type BettingSide,
  type BettingSideArgs,
  type Creator,
  type CreatorArgs,
} from '../types';

export const CONFIG_DISCRIMINATOR = new Uint8Array([
  155, 12, 170, 224, 30, 250, 204, 130,
]);

export function getConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIG_DISCRIMINATOR);
}

export type Config = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  adminFeePercentageBp: number;
  vault: Address;
  feesVault: Address;
  santaPot: bigint;
  grinchPot: bigint;
  santaBoxes: bigint;
  grinchBoxes: bigint;
  santaMultiplier: number;
  grinchMultiplier: number;
  gameEnded: boolean;
  initializedAt: bigint;
  withdrawUnclaimedAt: bigint;
  winningSide: Option<BettingSide>;
  creators: Array<Creator>;
  vaultBump: number;
  feesVaultBump: number;
  bump: number;
};

export type ConfigArgs = {
  admin: Address;
  adminFeePercentageBp: number;
  vault: Address;
  feesVault: Address;
  santaPot: number | bigint;
  grinchPot: number | bigint;
  santaBoxes: number | bigint;
  grinchBoxes: number | bigint;
  santaMultiplier: number;
  grinchMultiplier: number;
  gameEnded: boolean;
  initializedAt: number | bigint;
  withdrawUnclaimedAt: number | bigint;
  winningSide: OptionOrNullable<BettingSideArgs>;
  creators: Array<CreatorArgs>;
  vaultBump: number;
  feesVaultBump: number;
  bump: number;
};

export function getConfigEncoder(): Encoder<ConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['adminFeePercentageBp', getU16Encoder()],
      ['vault', getAddressEncoder()],
      ['feesVault', getAddressEncoder()],
      ['santaPot', getU64Encoder()],
      ['grinchPot', getU64Encoder()],
      ['santaBoxes', getU64Encoder()],
      ['grinchBoxes', getU64Encoder()],
      ['santaMultiplier', getU32Encoder()],
      ['grinchMultiplier', getU32Encoder()],
      ['gameEnded', getBooleanEncoder()],
      ['initializedAt', getI64Encoder()],
      ['withdrawUnclaimedAt', getI64Encoder()],
      ['winningSide', getOptionEncoder(getBettingSideEncoder())],
      ['creators', getArrayEncoder(getCreatorEncoder(), { size: 3 })],
      ['vaultBump', getU8Encoder()],
      ['feesVaultBump', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_DISCRIMINATOR })
  );
}

export function getConfigDecoder(): Decoder<Config> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['adminFeePercentageBp', getU16Decoder()],
    ['vault', getAddressDecoder()],
    ['feesVault', getAddressDecoder()],
    ['santaPot', getU64Decoder()],
    ['grinchPot', getU64Decoder()],
    ['santaBoxes', getU64Decoder()],
    ['grinchBoxes', getU64Decoder()],
    ['santaMultiplier', getU32Decoder()],
    ['grinchMultiplier', getU32Decoder()],
    ['gameEnded', getBooleanDecoder()],
    ['initializedAt', getI64Decoder()],
    ['withdrawUnclaimedAt', getI64Decoder()],
    ['winningSide', getOptionDecoder(getBettingSideDecoder())],
    ['creators', getArrayDecoder(getCreatorDecoder(), { size: 3 })],
    ['vaultBump', getU8Decoder()],
    ['feesVaultBump', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getConfigCodec(): Codec<ConfigArgs, Config> {
  return combineCodec(getConfigEncoder(), getConfigDecoder());
}

export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Config, TAddress> | MaybeAccount<Config, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigDecoder()
  );
}

export async function fetchConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Config, TAddress>> {
  const maybeAccount = await fetchMaybeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Config, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfig(maybeAccount);
}

export async function fetchAllConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Config>[]> {
  const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Config>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeConfig(maybeAccount));
}
