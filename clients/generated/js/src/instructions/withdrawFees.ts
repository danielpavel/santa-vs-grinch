/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { SANTA_VS_GRINCH_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_FEES_DISCRIMINATOR = new Uint8Array([
  198, 212, 171, 109, 144, 215, 174, 89,
]);

export function getWithdrawFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_FEES_DISCRIMINATOR
  );
}

export type WithdrawFeesInstruction<
  TProgram extends string = typeof SANTA_VS_GRINCH_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountState extends string | IAccountMeta<string> = string,
  TAccountFeesVault extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountState extends string
        ? WritableAccount<TAccountState>
        : TAccountState,
      TAccountFeesVault extends string
        ? WritableAccount<TAccountFeesVault>
        : TAccountFeesVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawFeesInstructionData = { discriminator: ReadonlyUint8Array };

export type WithdrawFeesInstructionDataArgs = {};

export function getWithdrawFeesInstructionDataEncoder(): Encoder<WithdrawFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_FEES_DISCRIMINATOR })
  );
}

export function getWithdrawFeesInstructionDataDecoder(): Decoder<WithdrawFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawFeesInstructionDataCodec(): Codec<
  WithdrawFeesInstructionDataArgs,
  WithdrawFeesInstructionData
> {
  return combineCodec(
    getWithdrawFeesInstructionDataEncoder(),
    getWithdrawFeesInstructionDataDecoder()
  );
}

export type WithdrawFeesAsyncInput<
  TAccountAdmin extends string = string,
  TAccountState extends string = string,
  TAccountFeesVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  state: Address<TAccountState>;
  feesVault?: Address<TAccountFeesVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getWithdrawFeesInstructionAsync<
  TAccountAdmin extends string,
  TAccountState extends string,
  TAccountFeesVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SANTA_VS_GRINCH_PROGRAM_ADDRESS,
>(
  input: WithdrawFeesAsyncInput<
    TAccountAdmin,
    TAccountState,
    TAccountFeesVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountState,
    TAccountFeesVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SANTA_VS_GRINCH_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    state: { value: input.state ?? null, isWritable: true },
    feesVault: { value: input.feesVault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.feesVault.value) {
    accounts.feesVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.state.value)),
        getBytesEncoder().encode(new Uint8Array([102, 101, 101, 115])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.state),
      getAccountMeta(accounts.feesVault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawFeesInstructionDataEncoder().encode({}),
  } as WithdrawFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountState,
    TAccountFeesVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawFeesInput<
  TAccountAdmin extends string = string,
  TAccountState extends string = string,
  TAccountFeesVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  state: Address<TAccountState>;
  feesVault: Address<TAccountFeesVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getWithdrawFeesInstruction<
  TAccountAdmin extends string,
  TAccountState extends string,
  TAccountFeesVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SANTA_VS_GRINCH_PROGRAM_ADDRESS,
>(
  input: WithdrawFeesInput<
    TAccountAdmin,
    TAccountState,
    TAccountFeesVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawFeesInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountState,
  TAccountFeesVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SANTA_VS_GRINCH_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    state: { value: input.state ?? null, isWritable: true },
    feesVault: { value: input.feesVault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.state),
      getAccountMeta(accounts.feesVault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawFeesInstructionDataEncoder().encode({}),
  } as WithdrawFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountState,
    TAccountFeesVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawFeesInstruction<
  TProgram extends string = typeof SANTA_VS_GRINCH_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    state: TAccountMetas[1];
    feesVault: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: WithdrawFeesInstructionData;
};

export function parseWithdrawFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      state: getNextAccount(),
      feesVault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawFeesInstructionDataDecoder().decode(instruction.data),
  };
}
