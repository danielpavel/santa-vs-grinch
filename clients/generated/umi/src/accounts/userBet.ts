/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type UserBet = Account<UserBetAccountData>;

export type UserBetAccountData = {
  discriminator: Uint8Array;
  owner: PublicKey;
  amount: bigint;
  tokenAmount: bigint;
  claimed: boolean;
  bump: number;
};

export type UserBetAccountDataArgs = {
  owner: PublicKey;
  amount: number | bigint;
  tokenAmount: number | bigint;
  claimed: boolean;
  bump: number;
};

export function getUserBetAccountDataSerializer(): Serializer<
  UserBetAccountDataArgs,
  UserBetAccountData
> {
  return mapSerializer<UserBetAccountDataArgs, any, UserBetAccountData>(
    struct<UserBetAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', publicKeySerializer()],
        ['amount', u64()],
        ['tokenAmount', u64()],
        ['claimed', bool()],
        ['bump', u8()],
      ],
      { description: 'UserBetAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([180, 131, 8, 241, 60, 243, 46, 63]),
    })
  ) as Serializer<UserBetAccountDataArgs, UserBetAccountData>;
}

export function deserializeUserBet(rawAccount: RpcAccount): UserBet {
  return deserializeAccount(rawAccount, getUserBetAccountDataSerializer());
}

export async function fetchUserBet(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserBet> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'UserBet');
  return deserializeUserBet(maybeAccount);
}

export async function safeFetchUserBet(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserBet | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUserBet(maybeAccount) : null;
}

export async function fetchAllUserBet(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserBet[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UserBet');
    return deserializeUserBet(maybeAccount);
  });
}

export async function safeFetchAllUserBet(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserBet[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeUserBet(maybeAccount as RpcAccount));
}

export function getUserBetGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'santaVsGrinch',
    '5Kox1zWxgz9oGXCYw65iGKAHYmiFov6FpPCib71NZ75x'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: PublicKey;
      amount: number | bigint;
      tokenAmount: number | bigint;
      claimed: boolean;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, publicKeySerializer()],
      amount: [40, u64()],
      tokenAmount: [48, u64()],
      claimed: [56, bool()],
      bump: [57, u8()],
    })
    .deserializeUsing<UserBet>((account) => deserializeUserBet(account))
    .whereField(
      'discriminator',
      new Uint8Array([180, 131, 8, 241, 60, 243, 46, 63])
    );
}
