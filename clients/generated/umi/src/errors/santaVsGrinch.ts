/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidVaultDepositAccount: Invalid deposit vault account */
export class InvalidVaultDepositAccountError extends ProgramError {
  override readonly name: string = 'InvalidVaultDepositAccount';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid deposit vault account', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidVaultDepositAccountError);
nameToErrorMap.set(
  'InvalidVaultDepositAccount',
  InvalidVaultDepositAccountError
);

/** InvalidVaultWinningsAccount: Invalid winnings vault account */
export class InvalidVaultWinningsAccountError extends ProgramError {
  override readonly name: string = 'InvalidVaultWinningsAccount';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Invalid winnings vault account', program, cause);
  }
}
codeToErrorMap.set(0x1771, InvalidVaultWinningsAccountError);
nameToErrorMap.set(
  'InvalidVaultWinningsAccount',
  InvalidVaultWinningsAccountError
);

/** InvalidAdmin: Invalid admin */
export class InvalidAdminError extends ProgramError {
  override readonly name: string = 'InvalidAdmin';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Invalid admin', program, cause);
  }
}
codeToErrorMap.set(0x1772, InvalidAdminError);
nameToErrorMap.set('InvalidAdmin', InvalidAdminError);

/** InvalidBetSide: Invalid bet side */
export class InvalidBetSideError extends ProgramError {
  override readonly name: string = 'InvalidBetSide';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Invalid bet side', program, cause);
  }
}
codeToErrorMap.set(0x1773, InvalidBetSideError);
nameToErrorMap.set('InvalidBetSide', InvalidBetSideError);

/** InvalidFeesVaultDepositAccount: Invalid fees vault account */
export class InvalidFeesVaultDepositAccountError extends ProgramError {
  override readonly name: string = 'InvalidFeesVaultDepositAccount';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid fees vault account', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidFeesVaultDepositAccountError);
nameToErrorMap.set(
  'InvalidFeesVaultDepositAccount',
  InvalidFeesVaultDepositAccountError
);

/** InvalidPercentage: Invalid Percentage */
export class InvalidPercentageError extends ProgramError {
  override readonly name: string = 'InvalidPercentage';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Invalid Percentage', program, cause);
  }
}
codeToErrorMap.set(0x1775, InvalidPercentageError);
nameToErrorMap.set('InvalidPercentage', InvalidPercentageError);

/** GameEnded: Game has already ended */
export class GameEndedError extends ProgramError {
  override readonly name: string = 'GameEnded';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Game has already ended', program, cause);
  }
}
codeToErrorMap.set(0x1776, GameEndedError);
nameToErrorMap.set('GameEnded', GameEndedError);

/** GameNotEnded: Game has not ended yet */
export class GameNotEndedError extends ProgramError {
  override readonly name: string = 'GameNotEnded';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Game has not ended yet', program, cause);
  }
}
codeToErrorMap.set(0x1777, GameNotEndedError);
nameToErrorMap.set('GameNotEnded', GameNotEndedError);

/** AlreadyClaimed: User has already claimed */
export class AlreadyClaimedError extends ProgramError {
  override readonly name: string = 'AlreadyClaimed';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('User has already claimed', program, cause);
  }
}
codeToErrorMap.set(0x1778, AlreadyClaimedError);
nameToErrorMap.set('AlreadyClaimed', AlreadyClaimedError);

/** InvalidTotalShares: Invalid total shares */
export class InvalidTotalSharesError extends ProgramError {
  override readonly name: string = 'InvalidTotalShares';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Invalid total shares', program, cause);
  }
}
codeToErrorMap.set(0x1779, InvalidTotalSharesError);
nameToErrorMap.set('InvalidTotalShares', InvalidTotalSharesError);

/** TooManyCreators: Too Many Creators */
export class TooManyCreatorsError extends ProgramError {
  override readonly name: string = 'TooManyCreators';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Too Many Creators', program, cause);
  }
}
codeToErrorMap.set(0x177a, TooManyCreatorsError);
nameToErrorMap.set('TooManyCreators', TooManyCreatorsError);

/** InvalidCreatorAddress: InvalidCreatorAddress */
export class InvalidCreatorAddressError extends ProgramError {
  override readonly name: string = 'InvalidCreatorAddress';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('InvalidCreatorAddress', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidCreatorAddressError);
nameToErrorMap.set('InvalidCreatorAddress', InvalidCreatorAddressError);

/** InvalidBetTag: InvalidBetTag */
export class InvalidBetTagError extends ProgramError {
  override readonly name: string = 'InvalidBetTag';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('InvalidBetTag', program, cause);
  }
}
codeToErrorMap.set(0x177c, InvalidBetTagError);
nameToErrorMap.set('InvalidBetTag', InvalidBetTagError);

/** InvalidCreatorConfig: InvalidCreatorConfig */
export class InvalidCreatorConfigError extends ProgramError {
  override readonly name: string = 'InvalidCreatorConfig';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('InvalidCreatorConfig', program, cause);
  }
}
codeToErrorMap.set(0x177d, InvalidCreatorConfigError);
nameToErrorMap.set('InvalidCreatorConfig', InvalidCreatorConfigError);

/** CreatorWithdrawalAlreadyClaimed: Creators withdrawal already claimed */
export class CreatorWithdrawalAlreadyClaimedError extends ProgramError {
  override readonly name: string = 'CreatorWithdrawalAlreadyClaimed';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Creators withdrawal already claimed', program, cause);
  }
}
codeToErrorMap.set(0x177e, CreatorWithdrawalAlreadyClaimedError);
nameToErrorMap.set(
  'CreatorWithdrawalAlreadyClaimed',
  CreatorWithdrawalAlreadyClaimedError
);

/** WitdrawalUnclaimedPeriodNotEnded: Witdrawal unclaimed period not ended */
export class WitdrawalUnclaimedPeriodNotEndedError extends ProgramError {
  override readonly name: string = 'WitdrawalUnclaimedPeriodNotEnded';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Witdrawal unclaimed period not ended', program, cause);
  }
}
codeToErrorMap.set(0x177f, WitdrawalUnclaimedPeriodNotEndedError);
nameToErrorMap.set(
  'WitdrawalUnclaimedPeriodNotEnded',
  WitdrawalUnclaimedPeriodNotEndedError
);

/** InvalidMint: Invalid Mint */
export class InvalidMintError extends ProgramError {
  override readonly name: string = 'InvalidMint';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Invalid Mint', program, cause);
  }
}
codeToErrorMap.set(0x1780, InvalidMintError);
nameToErrorMap.set('InvalidMint', InvalidMintError);

/** InvalidAmountToBurn: Amount to burn should be 100% of box price */
export class InvalidAmountToBurnError extends ProgramError {
  override readonly name: string = 'InvalidAmountToBurn';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Amount to burn should be 100% of box price', program, cause);
  }
}
codeToErrorMap.set(0x1781, InvalidAmountToBurnError);
nameToErrorMap.set('InvalidAmountToBurn', InvalidAmountToBurnError);

/** InvalidBuybackwallet: Invalid buyback wallet */
export class InvalidBuybackwalletError extends ProgramError {
  override readonly name: string = 'InvalidBuybackwallet';

  readonly code: number = 0x1782; // 6018

  constructor(program: Program, cause?: Error) {
    super('Invalid buyback wallet', program, cause);
  }
}
codeToErrorMap.set(0x1782, InvalidBuybackwalletError);
nameToErrorMap.set('InvalidBuybackwallet', InvalidBuybackwalletError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getSantaVsGrinchErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getSantaVsGrinchErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
