/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u16,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateMysteryBoxBurnPercentageBpInstructionAccounts = {
  admin: Signer;
  state: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateMysteryBoxBurnPercentageBpInstructionData = {
  discriminator: Uint8Array;
  percentageInBp: number;
};

export type UpdateMysteryBoxBurnPercentageBpInstructionDataArgs = {
  percentageInBp: number;
};

export function getUpdateMysteryBoxBurnPercentageBpInstructionDataSerializer(): Serializer<
  UpdateMysteryBoxBurnPercentageBpInstructionDataArgs,
  UpdateMysteryBoxBurnPercentageBpInstructionData
> {
  return mapSerializer<
    UpdateMysteryBoxBurnPercentageBpInstructionDataArgs,
    any,
    UpdateMysteryBoxBurnPercentageBpInstructionData
  >(
    struct<UpdateMysteryBoxBurnPercentageBpInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['percentageInBp', u16()],
      ],
      { description: 'UpdateMysteryBoxBurnPercentageBpInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([64, 140, 239, 163, 43, 68, 59, 219]),
    })
  ) as Serializer<
    UpdateMysteryBoxBurnPercentageBpInstructionDataArgs,
    UpdateMysteryBoxBurnPercentageBpInstructionData
  >;
}

// Args.
export type UpdateMysteryBoxBurnPercentageBpInstructionArgs =
  UpdateMysteryBoxBurnPercentageBpInstructionDataArgs;

// Instruction.
export function updateMysteryBoxBurnPercentageBp(
  context: Pick<Context, 'programs'>,
  input: UpdateMysteryBoxBurnPercentageBpInstructionAccounts &
    UpdateMysteryBoxBurnPercentageBpInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'santaVsGrinch',
    'G1rm3S34YvLkGdPH994cAVHxiq2JsGrDhtwKMgQbignc'
  );

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    state: {
      index: 1,
      isWritable: true as boolean,
      value: input.state ?? null,
    },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateMysteryBoxBurnPercentageBpInstructionArgs = {
    ...input,
  };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getUpdateMysteryBoxBurnPercentageBpInstructionDataSerializer().serialize(
      resolvedArgs as UpdateMysteryBoxBurnPercentageBpInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
