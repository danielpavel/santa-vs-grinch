/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateMysteryBoxPriceInstructionAccounts = {
  admin: Signer;
  state: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateMysteryBoxPriceInstructionData = {
  discriminator: Uint8Array;
  price: bigint;
};

export type UpdateMysteryBoxPriceInstructionDataArgs = {
  price: number | bigint;
};

export function getUpdateMysteryBoxPriceInstructionDataSerializer(): Serializer<
  UpdateMysteryBoxPriceInstructionDataArgs,
  UpdateMysteryBoxPriceInstructionData
> {
  return mapSerializer<
    UpdateMysteryBoxPriceInstructionDataArgs,
    any,
    UpdateMysteryBoxPriceInstructionData
  >(
    struct<UpdateMysteryBoxPriceInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['price', u64()],
      ],
      { description: 'UpdateMysteryBoxPriceInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([122, 152, 143, 112, 173, 18, 192, 165]),
    })
  ) as Serializer<
    UpdateMysteryBoxPriceInstructionDataArgs,
    UpdateMysteryBoxPriceInstructionData
  >;
}

// Args.
export type UpdateMysteryBoxPriceInstructionArgs =
  UpdateMysteryBoxPriceInstructionDataArgs;

// Instruction.
export function updateMysteryBoxPrice(
  context: Pick<Context, 'programs'>,
  input: UpdateMysteryBoxPriceInstructionAccounts &
    UpdateMysteryBoxPriceInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'santaVsGrinch',
    '5Kox1zWxgz9oGXCYw65iGKAHYmiFov6FpPCib71NZ75x'
  );

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    state: {
      index: 1,
      isWritable: true as boolean,
      value: input.state ?? null,
    },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateMysteryBoxPriceInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateMysteryBoxPriceInstructionDataSerializer().serialize(
    resolvedArgs as UpdateMysteryBoxPriceInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
